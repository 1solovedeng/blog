<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>力扣-1.两数之和（Two Sum）</title>
      <link href="/2025/05/07/%E5%8A%9B%E6%89%A3-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%EF%BC%88Two-Sum%EF%BC%89/"/>
      <url>/2025/05/07/%E5%8A%9B%E6%89%A3-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%EF%BC%88Two-Sum%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1-两数之和（Two-Sum）"><a href="#1-两数之和（Two-Sum）" class="headerlink" title="1. 两数之和（Two Sum）"></a><span style="color:#1E90FF;">1. 两数之和（Two Sum）</span></h1><h2 id="简单"><a href="#简单" class="headerlink" title="简单"></a><span style="color:#228B22;">简单</span></h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出和为目标值 <code>target</code> 的那两个整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><hr><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><span style="color:#800080;">示例 1：</span></h3><p><strong>输入：</strong> <span style="color:#FF4500;"><code>nums = [2,7,11,15]</code>, <code>target = 9</code></span><br><strong>输出：</strong> <span style="color:#FF4500;"><code>[0,1]</code></span><br><strong>解释：</strong> 因为 <span style="color:#DAA520;"><code>nums[0] + nums[1] == 9</code></span>，返回 <span style="color:#DAA520;"><code>[0, 1]</code></span>。</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><span style="color:#800080;">示例 2：</span></h3><p><strong>输入：</strong> <span style="color:#FF4500;"><code>nums = [3,2,4]</code>, <code>target = 6</code></span><br><strong>输出：</strong> <span style="color:#FF4500;"><code>[1,2]</code></span></p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><span style="color:#800080;">示例 3：</span></h3><p><strong>输入：</strong> <span style="color:#FF4500;"><code>nums = [3,3]</code>, <code>target = 6</code></span><br><strong>输出：</strong> <span style="color:#FF4500;"><code>[0,1]</code></span></p><hr><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a><span style="color:#FF8C00;">提示：</span></h3><ul><li><span style="color:#2E8B57;"><code>2 &lt;= nums.length &lt;= 10^4</code></span>  </li><li><span style="color:#2E8B57;"><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></span>  </li><li><span style="color:#2E8B57;"><code>-10^9 &lt;= target &lt;= 10^9</code></span>  </li><li><span style="color:#2E8B57;">只会存在一个有效答案</span></li></ul><hr><h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a><span style="color:#FF8C00;">进阶：</span></h3><p>你可以想出一个时间复杂度小于 <span style="color:#2F4F4F;"><code>O(n^2)</code></span> 的算法吗？</p><hr><h2 id="方法一：暴力枚举"><a href="#方法一：暴力枚举" class="headerlink" title="方法一：暴力枚举"></a><span style="color:#8B0000;">方法一：暴力枚举</span></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=<span class="string">&quot;color:#006400;&quot;</span>&gt;<span class="keyword">class</span> Solution &#123;&lt;/span&gt;</span><br><span class="line">&lt;span style=<span class="string">&quot;color:#8B008B;&quot;</span>&gt;<span class="keyword">public</span>:&lt;/span&gt;</span><br><span class="line">    &lt;span style=<span class="string">&quot;color:#0000CD;&quot;</span>&gt;vector&lt;<span class="type">int</span>&gt; <span class="built_in">twoSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="type">int</span> n = nums.<span class="built_in">size</span>();&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &amp;lt; n; ++i) &#123;&lt;/span&gt;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &amp;lt; n; ++j) &#123;&lt;/span&gt;</span><br><span class="line">                &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;&lt;/span&gt;</span><br><span class="line">                    &lt;span style=<span class="string">&quot;color:#B22222;&quot;</span>&gt;<span class="keyword">return</span> &#123;i, j&#125;;&lt;/span&gt;</span><br><span class="line">                &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#B22222;&quot;</span>&gt;<span class="keyword">return</span> &#123;&#125;;&lt;/span&gt;</span><br><span class="line">    &lt;span style=<span class="string">&quot;color:#0000CD;&quot;</span>&gt;&#125;&lt;/span&gt;</span><br><span class="line">&lt;span style=<span class="string">&quot;color:#006400;&quot;</span>&gt;&#125;;&lt;/span&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>执行用时：</strong> <span style="color:#8B0000;">47ms</span>，击败 <span style="color:#8B0000;">28.79%</span>  </li><li><strong>内存消耗：</strong> <span style="color:#8B0000;">13.80MB</span>，击败 <span style="color:#8B0000;">83.42%</span></li></ul><p><strong>思路：</strong><br>嵌套两个循环，枚举数组中每一对 <code>(i, j)</code>，检查 <span style="color:#DAA520;"><code>nums[i] + nums[j] == target</code></span> 时立即返回下标。不使用额外空间，直观易实现，但在 n 较大时性能迅速下降。</p><hr><h2 id="方法二：二次遍历哈希表"><a href="#方法二：二次遍历哈希表" class="headerlink" title="方法二：二次遍历哈希表"></a><span style="color:#8B0000;">方法二：二次遍历哈希表</span></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=<span class="string">&quot;color:#006400;&quot;</span>&gt;<span class="keyword">class</span> Solution &#123;&lt;/span&gt;</span><br><span class="line">&lt;span style=<span class="string">&quot;color:#8B008B;&quot;</span>&gt;<span class="keyword">public</span>:&lt;/span&gt;</span><br><span class="line">    &lt;span style=<span class="string">&quot;color:#0000CD;&quot;</span>&gt;vector&lt;<span class="type">int</span>&gt; <span class="built_in">twoSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; lookup;&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="type">int</span> n = nums.<span class="built_in">size</span>();&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="comment">// 第一次遍历：填表&lt;/span&gt;</span></span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123; lookup[nums[i]] = i; &#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="comment">// 第二次遍历：找补数&lt;/span&gt;</span></span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;&lt;/span&gt;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="type">int</span> c = target - nums[i];&lt;/span&gt;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="keyword">auto</span> it = lookup.<span class="built_in">find</span>(c);&lt;/span&gt;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color:#B22222;&quot;</span>&gt;<span class="keyword">if</span> (it != lookup.<span class="built_in">end</span>() &amp;&amp; it-&gt;second != i) &#123; <span class="keyword">return</span> &#123;i, it-&gt;second&#125;; &#125;&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#B22222;&quot;</span>&gt;<span class="keyword">return</span> &#123;&#125;;&lt;/span&gt;</span><br><span class="line">    &lt;span style=<span class="string">&quot;color:#0000CD;&quot;</span>&gt;&#125;&lt;/span&gt;</span><br><span class="line">&lt;span style=<span class="string">&quot;color:#006400;&quot;</span>&gt;&#125;;&lt;/span&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>执行用时：</strong> <span style="color:#8B0000;">7ms</span>，击败 <span style="color:#8B0000;">43.89%</span>  </li><li><strong>内存消耗：</strong> <span style="color:#8B0000;">15.74MB</span>，击败 <span style="color:#8B0000;">5.38%</span></li></ul><hr><h2 id="方法三：一次遍历哈希表（相对最优解）"><a href="#方法三：一次遍历哈希表（相对最优解）" class="headerlink" title="方法三：一次遍历哈希表（相对最优解）"></a><span style="color:#8B0000;">方法三：一次遍历哈希表（相对最优解）</span></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;span style=<span class="string">&quot;color:#006400;&quot;</span>&gt;<span class="meta">#<span class="keyword">include</span> &amp;lt;vector&amp;gt;<span class="string">&lt;/span&gt;</span></span></span><br><span class="line">&lt;span style=<span class="string">&quot;color:#006400;&quot;</span>&gt;<span class="meta">#<span class="keyword">include</span> &amp;lt;unordered_map&amp;gt;<span class="string">&lt;/span&gt;</span></span></span><br><span class="line">&lt;span style=<span class="string">&quot;color:#006400;&quot;</span>&gt;<span class="keyword">using</span> <span class="keyword">namespace</span> std;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;span style=<span class="string">&quot;color:#006400;&quot;</span>&gt;<span class="keyword">class</span> Solution &#123;&lt;/span&gt;</span><br><span class="line">&lt;span style=<span class="string">&quot;color:#8B008B;&quot;</span>&gt;<span class="keyword">public</span>:&lt;/span&gt;</span><br><span class="line">    &lt;span style=<span class="string">&quot;color:#0000CD;&quot;</span>&gt;vector&lt;<span class="type">int</span>&gt; <span class="built_in">twoSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target) &#123;&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; lookup;&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &amp;lt; (<span class="type">int</span>)nums.<span class="built_in">size</span>(); ++i) &#123;&lt;/span&gt;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="type">int</span> complement = target - nums[i];&lt;/span&gt;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;<span class="keyword">auto</span> it = lookup.<span class="built_in">find</span>(complement);&lt;/span&gt;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color:#B22222;&quot;</span>&gt;<span class="keyword">if</span> (it != lookup.<span class="built_in">end</span>()) &#123; <span class="keyword">return</span> &#123;it-&gt;second, i&#125;; &#125;&lt;/span&gt;</span><br><span class="line">            &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;lookup[nums[i]] = i;&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#A52A2A;&quot;</span>&gt;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;span style=<span class="string">&quot;color:#B22222;&quot;</span>&gt;<span class="keyword">return</span> &#123;&#125;;&lt;/span&gt;</span><br><span class="line">    &lt;span style=<span class="string">&quot;color:#0000CD;&quot;</span>&gt;&#125;&lt;/span&gt;</span><br><span class="line">&lt;span style=<span class="string">&quot;color:#006400;&quot;</span>&gt;&#125;;&lt;/span&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>执行用时：</strong> <span style="color:#8B0000;">0ms</span>，击败 <span style="color:#8B0000;">100.00%</span>  </li><li><strong>内存消耗：</strong> <span style="color:#8B0000;">14.55MB</span>，击败 <span style="color:#8B0000;">45.96%</span></li></ul><hr><h2 id="复杂度对比"><a href="#复杂度对比" class="headerlink" title="复杂度对比"></a>复杂度对比</h2><table><thead><tr><th>方法</th><th>时间复杂度</th><th>空间复杂度</th></tr></thead><tbody><tr><td><span style="color:#8B0000;">暴力枚举</span></td><td><span style="color:#8B0000;">O(n^2)</span></td><td><span style="color:#8B0000;">O(1)</span></td></tr><tr><td><span style="color:#8B0000;">二次遍历哈希表</span></td><td><span style="color:#8B0000;">O(n)</span></td><td><span style="color:#8B0000;">O(n)</span></td></tr><tr><td><span style="color:#8B0000;">一次遍历哈希表</span></td><td><span style="color:#8B0000;">平均 O(n)，最坏 O(n^2)</span></td><td><span style="color:#8B0000;">O(n)</span></td></tr></tbody></table><hr><h2 id="作者想说的话："><a href="#作者想说的话：" class="headerlink" title="作者想说的话："></a><span style="color:#000080;">作者想说的话：</span></h2><p>“两数之和（Two Sum）” 是经典入门题，这三种解法体现了解题思路从易到优的演进。  </p><p>过程中可以体会到「空间换时间」的威力，也认识到代码简洁性的重要性。  </p><p>希望本文能帮助你快速上手，并在面试或项目中灵活应用。  </p><p>下一步可以尝试 <span style="color:#2E8B57;"><code>Three Sum</code></span>、<span style="color:#2E8B57;"><code>Subarray Sum</code></span> 等变体，欢迎在评论区交流你的思路。</p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实用工具-Dev-C++</title>
      <link href="/2025/04/20/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7-Dev-C++/"/>
      <url>/2025/04/20/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7-Dev-C++/</url>
      
        <content type="html"><![CDATA[<h1 id="🛠️-推荐工具：Dev-C-中文绿色版"><a href="#🛠️-推荐工具：Dev-C-中文绿色版" class="headerlink" title="🛠️ 推荐工具：Dev-C++ 中文绿色版"></a>🛠️ 推荐工具：Dev-C++ 中文绿色版</h1><p><strong>Dev-C++</strong> 是一款轻量级、免费开源的 C&#x2F;C++ 集成开发环境（IDE），内置 GCC 编译器，适用于 Windows 系统。其界面简洁、操作直观，尤其适合 C&#x2F;C++ 初学者和竞赛选手使用。</p><h2 id="✅-主要特点"><a href="#✅-主要特点" class="headerlink" title="✅ 主要特点"></a>✅ 主要特点</h2><ul><li><strong>语法高亮与代码补全</strong>：支持语法高亮显示和自动代码补全，减少编辑错误，提高编码效率。  </li><li><strong>多语言支持</strong>：提供简体中文、繁体中文、英语等多种语言界面，方便不同用户使用。  </li><li><strong>内置调试功能</strong>：集成调试器，支持断点设置、变量监视等基本调试操作。  </li><li><strong>适合初学者</strong>：操作简便，学习成本低，是学习 C&#x2F;C++ 编程的理想工具。  </li><li><strong>集成多种工具</strong>：集合了 MinGW 中的 GCC 编译器、GDB 调试器和 AStyle 格式整理器等自由软件。</li></ul><h2 id="📥-下载地址"><a href="#📥-下载地址" class="headerlink" title="📥 下载地址"></a>📥 下载地址</h2><ul><li>阿里云盘： <a href="https://www.alipan.com/s/JDbA6mR8iVm">点击下载</a>  </li><li>百度网盘： <a href="https://pan.baidu.com/s/1S4FZFabzbIL2nK_bfe6MNw?pwd=nura">点击下载</a>  <blockquote><p>提取码：<code>nura</code>  </p></blockquote></li><li>夸克网盘： <a href="https://pan.quark.cn/s/5176261faeae">点击下载</a></li></ul><blockquote><p>⚠️ 如果链接失效，请在评论区留言，我们会及时更新。感谢您的支持与指正！</p></blockquote><h2 id="📚-安装与使用教程"><a href="#📚-安装与使用教程" class="headerlink" title="📚 安装与使用教程"></a>📚 安装与使用教程</h2><ul><li><a href="https://www.dotcpp.com/course/338">Dev-C++ 下载与安装图文教程</a>  </li><li><a href="https://blog.csdn.net/bigzql/article/details/109349382">Dev-C++ 安装及使用方法教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
