<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>项目推荐-SDL太空战机射击游戏(SDLShooter)</title>
      <link href="/2025/05/13/%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90-SDL%E5%A4%AA%E7%A9%BA%E6%88%98%E6%9C%BA%E5%B0%84%E5%87%BB%E6%B8%B8%E6%88%8F-SDLShooter/"/>
      <url>/2025/05/13/%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90-SDL%E5%A4%AA%E7%A9%BA%E6%88%98%E6%9C%BA%E5%B0%84%E5%87%BB%E6%B8%B8%E6%88%8F-SDLShooter/</url>
      
        <content type="html"><![CDATA[<h1 align="center" style="color:#1E90FF;">🚀 推荐项目：SDL 太空战机射击游戏</h1><hr><h2 id="🧭-项目简介"><a href="#🧭-项目简介" class="headerlink" title="🧭 项目简介"></a>🧭 项目简介</h2><ul><li><strong>项目名称</strong>：<strong>SDLShooter</strong>（太空战机射击游戏）  </li><li><strong>教程主页</strong>：👉 <a href="https://cppgamedev.top/courses/sdl-space-shooter">https://cppgamedev.top/courses/sdl-space-shooter</a>  </li><li><strong>源项目仓库</strong>：🔗 <a href="https://github.com/WispSnow/SDLShooter">github.com&#x2F;WispSnow&#x2F;SDLShooter</a>  </li><li><strong>我的个性化版本(持续学习并更新中)</strong>：✨ <a href="https://github.com/1solovedeng/SDLShooter">github.com&#x2F;1solovedeng&#x2F;SDLShooter</a>  </li><li><strong>开源协议</strong>：🆓 <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0-1.0（公有领域，无需署名）</a></li></ul><hr><h2 id="🧑‍💻-为什么推荐这个项目给初学者？"><a href="#🧑‍💻-为什么推荐这个项目给初学者？" class="headerlink" title="🧑‍💻 为什么推荐这个项目给初学者？"></a>🧑‍💻 <span style="color:#FF6600;"><strong>为什么推荐这个项目给初学者？</strong></span></h2><ol><li>🛠️ <span style="color:#00BFFF;"><strong>跨平台、零门槛</strong></span>：基于 SDL2&#x2F;SDL3，支持 Windows &#x2F; Linux &#x2F; macOS，全平台开发无压力。  </li><li>🧩 <span style="color:#32CD32;"><strong>模块化教程</strong></span>：每个章节配有文字+视频教学，对应源码分支一一匹配，方便跟进。  </li><li>🔍 <span style="color:#FF1493;"><strong>实战 + 原理结合</strong></span>：涵盖图形渲染、输入处理、碰撞检测、资源加载等游戏开发核心。  </li><li>📦 <span style="color:#FFA500;"><strong>内置丰富素材</strong></span>：内含音乐、音效、精灵图、爆炸特效、字体，无需再东找西找。  </li><li>🌱 <span style="color:#8A2BE2;"><strong>超自由授权</strong></span>：CC0 许可可商用可二创，想怎么玩都行！</li></ol><hr><h2 id="🌟-项目亮点展示"><a href="#🌟-项目亮点展示" class="headerlink" title="🌟 项目亮点展示"></a>🌟 <span style="color:#DC143C;"><strong>项目亮点展示</strong></span></h2><ul><li>🎮 <span style="color:#FF4500;"><strong>完整功能</strong></span>：主菜单、敌机 AI、爆炸特效、子弹发射、BGM 等典型系统一应俱全。  </li><li>🖼️ <span style="color:#1E90FF;"><strong>高质量素材包整合</strong></span>：以下资源全部 CC0 免费可用：  <ul><li>飞机素材：<a href="https://anim86.itch.io/space-shoter-starter-pack">anim86.itch.io</a>  </li><li>UI 血条：<a href="https://doshrosity.itch.io/32x32-health-ui">doshrosity.itch.io</a>  </li><li>音效包：<a href="https://enprimer.itch.io/spaceship-sound-effects-pack">enprimer.itch.io</a>  </li><li>音乐包：<a href="https://leohpaz.itch.io/space-music-pack">leohpaz.itch.io</a>  </li><li>像素字体：<a href="https://timothyqiu.itch.io/vonwaon-bitmap">timothyqiu.itch.io</a>  </li><li>爆炸特效：<a href="https://ansimuz.itch.io/explosion-animations-pack">ansimuz.itch.io</a></li></ul></li><li>🧠 <span style="color:#20B2AA;"><strong>面向学习设计</strong></span>：每章节分支 <code>chapter-x</code> 可一键跳转当前进度，边学边练最舒适。  </li><li>💡 <span style="color:#FF69B4;"><strong>高度可扩展性</strong></span>：源码清晰，便于添加关卡系统、武器升级、多玩家或联网功能。</li></ul><hr><h2 id="🛠️-环境配置指南"><a href="#🛠️-环境配置指南" class="headerlink" title="🛠️ 环境配置指南"></a>🛠️ 环境配置指南</h2><h3 id="🔵-Linux（Ubuntu）"><a href="#🔵-Linux（Ubuntu）" class="headerlink" title="🔵 Linux（Ubuntu）"></a>🔵 Linux（Ubuntu）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install cmake libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev</span><br></pre></td></tr></table></figure><h3 id="🍎-macOS（基于-Homebrew）"><a href="#🍎-macOS（基于-Homebrew）" class="headerlink" title="🍎 macOS（基于 Homebrew）"></a>🍎 macOS（基于 Homebrew）</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install cmake sdl2 sdl2_image sdl2_mixer sdl2_ttf</span><br></pre></td></tr></table></figure><h3 id="🪟-Windows（推荐使用-Visual-Studio-或-VSCode）"><a href="#🪟-Windows（推荐使用-Visual-Studio-或-VSCode）" class="headerlink" title="🪟 Windows（推荐使用 Visual Studio 或 VSCode）"></a>🪟 Windows（推荐使用 Visual Studio 或 VSCode）</h3><ol><li>安装 <strong>Visual Studio 生成工具</strong>（或使用 VS2022）。  </li><li>下载 SDL2、SDL2_image、SDL2_mixer、SDL2_ttf 的 MSVC 版本。  </li><li>将 SDL <code>主文件夹路径</code> 与 <code>lib\x64</code> 添加到系统 PATH。  </li><li>使用 CMake 构建项目即可。</li></ol><hr><h2 id="🚀-快速开始（命令行方式）"><a href="#🚀-快速开始（命令行方式）" class="headerlink" title="🚀 快速开始（命令行方式）"></a>🚀 快速开始（命令行方式）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/WispSnow/SDLShooter.git</span><br><span class="line"><span class="built_in">cd</span> SDLShooter</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./SDLShooter</span><br></pre></td></tr></table></figure><blockquote><p>✅ <strong>提示</strong>：也可以用 Visual Studio、CLion、VSCode 等 IDE 直接打开项目。</p></blockquote><hr><h2 id="🔧-我的个性版本（持续学习并更新中）"><a href="#🔧-我的个性版本（持续学习并更新中）" class="headerlink" title="🔧 我的个性版本（持续学习并更新中）"></a>🔧 我的个性版本（持续学习并更新中）</h2><p>📌 欢迎查看我的个性化实现和改进版：<a href="https://github.com/1solovedeng/SDLShooter">https://github.com/1solovedeng/SDLShooter</a></p><hr><h2 id="🎯-适合谁？"><a href="#🎯-适合谁？" class="headerlink" title="🎯 适合谁？"></a>🎯 <span style="color:#00CED1;"><strong>适合谁？</strong></span></h2><ul><li>📚 C++ 初学者，希望快速建立完整项目经验  </li><li>🎮 对游戏开发感兴趣，想了解从零构建一个 2D 游戏的全过程  </li><li>💡 想基于 SDL 引擎进行拓展开发，如 AI、粒子、物理、地图编辑器等</li></ul><hr><h2 id="🏁-总结"><a href="#🏁-总结" class="headerlink" title="🏁 总结"></a>🏁 总结</h2><p>🎉 <strong>SDLShooter</strong> 是一个集实战、学习、素材、授权于一体的超强新手项目。<br>🎯 如果你正在寻找一个能立刻投入实践、同时能打通 SDL 知识体系的项目，它就是你的最佳选择！<br>🛠️ 动手开发，<span style="color:#32CD32;"><strong>从这款射击游戏开始你的 C++ 游戏开发之路！</strong></span></p><hr><h2 align="center" style="color:#FF8C00;">🌌 Happy Coding & Enjoy Shooting! 🌌</h2>]]></content>
      
      
      <categories>
          
          <category> ProjectPicks </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣-1.两数之和（Two Sum）</title>
      <link href="/2025/05/07/%E5%8A%9B%E6%89%A3-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%EF%BC%88Two-Sum%EF%BC%89/"/>
      <url>/2025/05/07/%E5%8A%9B%E6%89%A3-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%EF%BC%88Two-Sum%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="1-两数之和（Two-Sum）"><a href="#1-两数之和（Two-Sum）" class="headerlink" title="1. 两数之和（Two Sum）"></a><span style="color:#1E90FF;">1. 两数之和（Two Sum）</span></h1><h2 id="简单"><a href="#简单" class="headerlink" title="简单"></a><span style="color:#228B22;">简单</span></h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出和为目标值 <code>target</code> 的那两个整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案，并且你不能使用两次相同的元素。</p><p>你可以按任意顺序返回答案。</p><hr><h3 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a><span style="color:#800080;">示例 1：</span></h3><p><strong>输入：</strong> <span style="color:#FF4500;"><code>nums = [2,7,11,15]</code>, <code>target = 9</code></span><br><strong>输出：</strong> <span style="color:#FF4500;"><code>[0,1]</code></span><br><strong>解释：</strong> 因为 <span style="color:#DAA520;"><code>nums[0] + nums[1] == 9</code></span>，返回 <span style="color:#DAA520;"><code>[0, 1]</code></span>。</p><h3 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a><span style="color:#800080;">示例 2：</span></h3><p><strong>输入：</strong> <span style="color:#FF4500;"><code>nums = [3,2,4]</code>, <code>target = 6</code></span><br><strong>输出：</strong> <span style="color:#FF4500;"><code>[1,2]</code></span></p><h3 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a><span style="color:#800080;">示例 3：</span></h3><p><strong>输入：</strong> <span style="color:#FF4500;"><code>nums = [3,3]</code>, <code>target = 6</code></span><br><strong>输出：</strong> <span style="color:#FF4500;"><code>[0,1]</code></span></p><hr><h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a><span style="color:#FF8C00;">提示：</span></h3><ul><li><span style="color:#2E8B57;"><code>2 &lt;= nums.length &lt;= 10^4</code></span>  </li><li><span style="color:#2E8B57;"><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></span>  </li><li><span style="color:#2E8B57;"><code>-10^9 &lt;= target &lt;= 10^9</code></span>  </li><li><span style="color:#2E8B57;">只会存在一个有效答案</span></li></ul><hr><h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a><span style="color:#FF8C00;">进阶：</span></h3><p>你可以想出一个时间复杂度小于 <span style="color:#2F4F4F;"><code>O(n^2)</code></span> 的算法吗？</p><hr><h2 id="方法一：暴力枚举"><a href="#方法一：暴力枚举" class="headerlink" title="方法一：暴力枚举"></a><span style="color:#8B0000;">方法一：暴力枚举</span></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;i, j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>执行用时：</strong> <span style="color:#8B0000;">47ms</span>，击败 <span style="color:#8B0000;">28.79%</span>  </li><li><strong>内存消耗：</strong> <span style="color:#8B0000;">13.80MB</span>，击败 <span style="color:#8B0000;">83.42%</span></li></ul><p><strong>思路：</strong><br>嵌套两个循环，枚举数组中每一对 <code>(i, j)</code>，检查 <span style="color:#DAA520;"><code>nums[i] + nums[j] == target</code></span> 时立即返回下标。不使用额外空间，直观易实现，但在 n 较大时性能迅速下降。</p><hr><h2 id="方法二：二次遍历哈希表"><a href="#方法二：二次遍历哈希表" class="headerlink" title="方法二：二次遍历哈希表"></a><span style="color:#8B0000;">方法二：二次遍历哈希表</span></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; lookup;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="comment">// 第一次遍历：填表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            lookup[nums[i]] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二次遍历：找补数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> c = target - nums[i];</span><br><span class="line">            <span class="keyword">auto</span> it = lookup.<span class="built_in">find</span>(c);</span><br><span class="line">            <span class="keyword">if</span> (it != lookup.<span class="built_in">end</span>() &amp;&amp; it-&gt;second != i) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;i, it-&gt;second&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>执行用时：</strong> <span style="color:#8B0000;">7ms</span>，击败 <span style="color:#8B0000;">43.89%</span>  </li><li><strong>内存消耗：</strong> <span style="color:#8B0000;">15.74MB</span>，击败 <span style="color:#8B0000;">5.38%</span></li></ul><hr><h2 id="方法三：一次遍历哈希表（相对最优解）"><a href="#方法三：一次遍历哈希表（相对最优解）" class="headerlink" title="方法三：一次遍历哈希表（相对最优解）"></a><span style="color:#8B0000;">方法三：一次遍历哈希表（相对最优解）</span></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 主体函数：一次遍历哈希表</span></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; lookup;              <span class="comment">// 准备一个空的哈希表</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)nums.<span class="built_in">size</span>(); ++i) &#123; <span class="comment">// 遍历每个元素</span></span><br><span class="line">            <span class="type">int</span> complement = target - nums[i];       <span class="comment">// 计算补数</span></span><br><span class="line">            <span class="keyword">auto</span> it = lookup.<span class="built_in">find</span>(complement);       <span class="comment">// 在哈希表中查找补数</span></span><br><span class="line">            <span class="keyword">if</span> (it != lookup.<span class="built_in">end</span>()) &#123;               <span class="comment">// 若找到了</span></span><br><span class="line">                <span class="keyword">return</span> &#123;it-&gt;second, i&#125;;              <span class="comment">// 立即返回“补数的下标 + 当前下标”</span></span><br><span class="line">            &#125;</span><br><span class="line">            lookup[nums[i]] = i;                     <span class="comment">// 否则，将当前元素插入哈希表</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>执行用时：</strong> <span style="color:#8B0000;">0ms</span>，击败 <span style="color:#8B0000;">100.00%</span>  </li><li><strong>内存消耗：</strong> <span style="color:#8B0000;">14.55MB</span>，击败 <span style="color:#8B0000;">45.96%</span></li></ul><hr><h2 id="复杂度对比"><a href="#复杂度对比" class="headerlink" title="复杂度对比"></a>复杂度对比</h2><table><thead><tr><th>方法</th><th>时间复杂度</th><th>空间复杂度</th></tr></thead><tbody><tr><td><span style="color:#8B0000;">暴力枚举</span></td><td><span style="color:#8B0000;">O(n^2)</span></td><td><span style="color:#8B0000;">O(1)</span></td></tr><tr><td><span style="color:#8B0000;">二次遍历哈希表</span></td><td><span style="color:#8B0000;">O(n)</span></td><td><span style="color:#8B0000;">O(n)</span></td></tr><tr><td><span style="color:#8B0000;">一次遍历哈希表</span></td><td><span style="color:#8B0000;">平均 O(n)，最坏 O(n^2)</span></td><td><span style="color:#8B0000;">O(n)</span></td></tr></tbody></table><hr><h2 id="作者想说的话："><a href="#作者想说的话：" class="headerlink" title="作者想说的话："></a><span style="color:#000080;">作者想说的话：</span></h2><p>“两数之和（Two Sum）” 是经典入门题，这三种解法体现了解题思路从易到优的演进。  </p><p>过程中可以体会到「空间换时间」的威力，也认识到代码简洁性的重要性。  </p><p>希望本文能帮助你快速上手，并在面试或项目中灵活应用。  </p><p>下一步可以尝试 <span style="color:#2E8B57;"><code>Three Sum</code></span>、<span style="color:#2E8B57;"><code>Subarray Sum</code></span> 等变体，欢迎在评论区交流你的思路。</p>]]></content>
      
      
      <categories>
          
          <category> LearningNotes </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实用工具-Dev-C++</title>
      <link href="/2025/04/20/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7-Dev-C++/"/>
      <url>/2025/04/20/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7-Dev-C++/</url>
      
        <content type="html"><![CDATA[<h1 id="🛠️-推荐工具：Dev-C-中文绿色版"><a href="#🛠️-推荐工具：Dev-C-中文绿色版" class="headerlink" title="🛠️ 推荐工具：Dev-C++ 中文绿色版"></a>🛠️ 推荐工具：Dev-C++ 中文绿色版</h1><p><strong>Dev-C++</strong> 是一款轻量级、免费开源的 C&#x2F;C++ 集成开发环境（IDE），内置 GCC 编译器，适用于 Windows 系统。其界面简洁、操作直观，尤其适合 C&#x2F;C++ 初学者和竞赛选手使用。</p><h2 id="✅-主要特点"><a href="#✅-主要特点" class="headerlink" title="✅ 主要特点"></a>✅ 主要特点</h2><ul><li><strong>语法高亮与代码补全</strong>：支持语法高亮显示和自动代码补全，减少编辑错误，提高编码效率。  </li><li><strong>多语言支持</strong>：提供简体中文、繁体中文、英语等多种语言界面，方便不同用户使用。  </li><li><strong>内置调试功能</strong>：集成调试器，支持断点设置、变量监视等基本调试操作。  </li><li><strong>适合初学者</strong>：操作简便，学习成本低，是学习 C&#x2F;C++ 编程的理想工具。  </li><li><strong>集成多种工具</strong>：集合了 MinGW 中的 GCC 编译器、GDB 调试器和 AStyle 格式整理器等自由软件。</li></ul><h2 id="📥-下载地址"><a href="#📥-下载地址" class="headerlink" title="📥 下载地址"></a>📥 下载地址</h2><ul><li>阿里云盘： <a href="https://www.alipan.com/s/JDbA6mR8iVm">点击下载</a>  </li><li>百度网盘： <a href="https://pan.baidu.com/s/1S4FZFabzbIL2nK_bfe6MNw?pwd=nura">点击下载</a>  <blockquote><p>提取码：<code>nura</code>  </p></blockquote></li><li>夸克网盘： <a href="https://pan.quark.cn/s/5176261faeae">点击下载</a></li></ul><blockquote><p>⚠️ 如果链接失效，请在评论区留言，我们会及时更新。感谢您的支持与指正！</p></blockquote><h2 id="📚-安装与使用教程"><a href="#📚-安装与使用教程" class="headerlink" title="📚 安装与使用教程"></a>📚 安装与使用教程</h2><ul><li><a href="https://www.dotcpp.com/course/338">Dev-C++ 下载与安装图文教程</a>  </li><li><a href="https://blog.csdn.net/bigzql/article/details/109349382">Dev-C++ 安装及使用方法教程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PracticalTools </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
